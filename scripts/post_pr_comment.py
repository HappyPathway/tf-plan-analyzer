#!/usr/bin/env python3

import argparse
import json
import os
import sys
import requests

def read_report(report_path):
    """Read the analysis report file."""
    try:
        with open(report_path, 'r') as f:
            return f.read()
    except Exception as e:
        print(f"Error reading report file: {e}", file=sys.stderr)
        sys.exit(1)

def create_pr_comment(report_content, github_token, repo, pr_number):
    """Create a PR comment with the analysis results."""
    # If report is too large, truncate it and add a note
    MAX_COMMENT_LENGTH = 65000  # GitHub has a limit of ~65536 chars
    report_for_comment = report_content
    
    if len(report_content) > MAX_COMMENT_LENGTH:
        truncated_content = report_content[:MAX_COMMENT_LENGTH - 500]
        # Try to find the last complete issue to avoid cutting in the middle
        last_separator = truncated_content.rfind("---")
        if last_separator != -1:
            truncated_content = truncated_content[:last_separator]
        
        report_for_comment = f"{truncated_content}\n\n‚ö†Ô∏è **This report was truncated due to GitHub comment size limits.** Please check the full report in the artifacts."
    
    # Create the comment via GitHub API
    headers = {
        'Authorization': f'token {github_token}',
        'Accept': 'application/vnd.github.v3+json'
    }
    
    comment_url = f"https://api.github.com/repos/{repo}/issues/{pr_number}/comments"
    
    comment_body = f"""## üõ°Ô∏è Terraform Plan Security Analysis

{report_for_comment}

---
*Generated by the [Terraform Plan Analyzer](https://github.com/HappyPathway/tf-plan-analyzer) Action*
"""
    
    data = {
        'body': comment_body
    }
    
    try:
        response = requests.post(comment_url, headers=headers, json=data)
        response.raise_for_status()
        print(f"Successfully posted comment to PR #{pr_number}")
    except Exception as e:
        print(f"Error posting comment to PR: {e}", file=sys.stderr)
        sys.exit(1)

def main():
    parser = argparse.ArgumentParser(description='Post Terraform plan analysis results as a GitHub PR comment.')
    parser.add_argument('--report-path', required=True, help='Path to the analysis report file')
    parser.add_argument('--github-token', required=True, help='GitHub token for API access')
    parser.add_argument('--repo', required=True, help='GitHub repository in format owner/repo')
    parser.add_argument('--pr-number', required=True, help='PR number to post the comment to')
    
    args = parser.parse_args()
    
    # Read the report
    report_content = read_report(args.report_path)
    
    # Post as PR comment
    create_pr_comment(report_content, args.github_token, args.repo, args.pr_number)
    
    print("PR comment created successfully")
    sys.exit(0)

if __name__ == "__main__":
    main()